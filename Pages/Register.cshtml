@page
@using static Microsoft.AspNetCore.Mvc.RazorPages.PageBase;
@using System.Text.RegularExpressions;
@model RegisterModel
@{
    #pragma warning disable CS8602
    ViewData["Title"] = "Register";
}

<h1>@ViewData["Title"]</h1>

<!-- Registration Form -->
<form method="post">
    <fieldset>
        <div>
            <label for="email">Email:</label>
            <input type="text" name="email" asp-for="Email" value="" id="email" placeholder="you@example.com" class="text-black" />
        </div>
        <div>
            <label for="username">Username:</label>
            <input type="text" name="username" asp-for="Username" value="" id="username" placeholder="you" class="text-black" />
        </div>
        <div>
            <label for="password">Password:</label>
            <input type="text" name="password" asp-for="Password" value="" id="pass" class="text-black" />
        </div>
        <div>
            <label for="sq">Security Question:</label>
            <input type="text" name="securityquestion" asp-for="SecurityQuestion" value="" id="sq" class="text-black" />
        </div>
        <div>
            <label for="a">Answer:</label>
            <input type="text" name="answer" asp-for="Answer" value="" id="a" class="text-black" />
        </div>
        <div>
            <label for="checkbox">Verify:</label>
            <input type="checkbox" name="checkbox" asp-for="Checkbox" id="checkbox" class="text-black"/>
        </div>
        <div>
            <label>&nbsp;</label>
            <input type="submit" value="Submit" class="submit" />
        </div>
    </fieldset>
</form>
@{
    var message = TempData["Result"] as string;
}

@if (!string.IsNullOrEmpty(message))
{
    <script>
        alert('@message');
    </script>
}
<script>
    async function GeneratePass()
    {
        try
        {
            const response = await fetch("api/Password/Generate"); // we set the response to the results of the fetch
            if(!response.ok) // if response isn't ok (not found, internal server error, forbidden, bad request, network issues)
            {
                console.error("GeneratePass got a not ok response.\n" + response.status);
            }

            const data = await response.json(); // we set data to the response parsed in json
            document.getElementById("pass").value = data.password; // so we just set the value of pass to data.password, which is the password received in the response body
        }
        catch(error) // if some odd error occurs, it's caught here
        {
            console.error("GeneratePass ran into an error.\n" + error.message);
        }
    }
</script>
<button onclick="GeneratePass()">Generate Pass</button>

@if (TempData["Result"] != null && TempData["Result"].ToString().Contains("Account Registered. Logged into "))
{
    <script>
        setTimeout(function () {
            window.location.href = '@Url.Page("Index")';
        }, 0);
    </script>
}